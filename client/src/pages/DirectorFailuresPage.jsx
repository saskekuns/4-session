import { useEffect, useState } from "react"
import { useNavigate } from "react-router-dom"

export default function DirectorFailuresPage() {
  const [failures, setFailures] = useState([])
  const [error, setError] = useState("")
  const [loading, setLoading] = useState(true)

  const [startDate, setStartDate] = useState("")
  const [endDate, setEndDate] = useState("")
  const [report, setReport] = useState([])

  const navigate = useNavigate()

  useEffect(() => {
    const user = JSON.parse(localStorage.getItem("user"))
    if (!user || user.role !== "–î–∏—Ä–µ–∫—Ç–æ—Ä") {
      navigate("/")
      return
    }

    fetchFailures()
  }, [])

  const fetchFailures = async () => {
    try {
      const token = localStorage.getItem("token")
      const res = await fetch("http://localhost:3000/api/failure", {
        headers: { Authorization: `Bearer ${token}` },
      })

      if (!res.ok) throw new Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö")

      const data = await res.json()
      setFailures(data)
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–±–æ–µ–≤:", err)
      setError("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ.")
    } finally {
      setLoading(false)
    }
  }

  const fetchReport = async () => {
    try {
      const token = localStorage.getItem("token")
      const url = `http://localhost:3000/api/failure/report?start=${startDate}&end=${endDate}`

      const res = await fetch(url, {
        headers: { Authorization: `Bearer ${token}` },
      })

      if (!res.ok) throw new Error("–û—à–∏–±–∫–∞ –æ—Ç—á—ë—Ç–∞")

      const data = await res.json()
      setReport(data)
      setError("")
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç—á—ë—Ç–∞:", err)
      setError("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ—Ç—á—ë—Ç–∞")
    }
  }

  const handlePrint = () => {
    window.print()
  }

  return (
    <div style={{ padding: "2rem" }}>
      <h2>–°–±–æ–∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è (—Ä–µ–∂–∏–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞)</h2>

      {loading ? (
        <p>–ó–∞–≥—Ä—É–∑–∫–∞...</p>
      ) : error && failures.length === 0 ? (
        <p style={{ color: "red" }}>{error}</p>
      ) : (
        <>
          <table border="1" cellPadding="6" style={{ borderCollapse: "collapse", width: "100%", marginBottom: "2rem" }}>
            <thead>
              <tr>
                <th>ID</th>
                <th>–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ</th>
                <th>–ü—Ä–∏—á–∏–Ω–∞</th>
                <th>–ù–∞—á–∞–ª–æ</th>
                <th>–û–∫–æ–Ω—á–∞–Ω–∏–µ</th>
                <th>–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª</th>
              </tr>
            </thead>
            <tbody>
              {failures.map((f) => (
                <tr key={f.id}>
                  <td>{f.id}</td>
                  <td>{f.equipment_label}</td>
                  <td>{f.reason_label}</td>
                  <td>{new Date(f.start_time).toLocaleString()}</td>
                  <td>{f.end_time ? new Date(f.end_time).toLocaleString() : "‚Äî"}</td>
                  <td>{f.registered_by}</td>
                </tr>
              ))}
            </tbody>
          </table>
        </>
      )}

      <h3>üìä –û—Ç—á—ë—Ç –ø–æ —Å–±–æ—è–º (–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –ø—Ä–∏—á–∏–Ω–∞–º)</h3>
      <p>–ü–æ –∫–∞–∂–¥–æ–π –ø—Ä–∏—á–∏–Ω–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–æ —Å—É–º–º–∞—Ä–Ω–æ–µ –≤—Ä–µ–º—è –ø—Ä–æ—Å—Ç–æ—è –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥.</p>

      <div style={{ marginBottom: "1rem" }}>
        <label>
          –ù–∞—á–∞–ª–æ:{" "}
          <input type="date" value={startDate} onChange={(e) => setStartDate(e.target.value)} />
        </label>
        <label style={{ marginLeft: "1rem" }}>
          –ö–æ–Ω–µ—Ü:{" "}
          <input type="date" value={endDate} onChange={(e) => setEndDate(e.target.value)} />
        </label>
        <button style={{ marginLeft: "1rem" }} onClick={fetchReport}>
          –ü–æ–ª—É—á–∏—Ç—å –æ—Ç—á—ë—Ç
        </button>
        <button style={{ marginLeft: "1rem" }} onClick={handlePrint}>
          üñ®Ô∏è –ü–µ—á–∞—Ç—å
        </button>
      </div>

      {error && report.length === 0 && <p style={{ color: "red" }}>{error}</p>}

      {report.length > 0 ? (
        <table border="1" cellPadding="6" style={{ borderCollapse: "collapse", width: "100%" }}>
          <thead>
            <tr>
              <th>–ü—Ä–∏—á–∏–Ω–∞ —Å–±–æ—è</th>
              <th>–°—É–º–º–∞—Ä–Ω–æ–µ –≤—Ä–µ–º—è –ø—Ä–æ—Å—Ç–æ–µ–≤ (–º–∏–Ω—É—Ç—ã)</th>
            </tr>
          </thead>
          <tbody>
            {report.map((row, index) => (
              <tr key={index}>
                <td>{row.reason}</td>
                <td>{Math.round(row.total_minutes)}</td>
              </tr>
            ))}
          </tbody>
        </table>
      ) : (
        <p style={{ fontStyle: "italic" }}>
          –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—á—ë—Ç–∞. –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ü–æ–ª—É—á–∏—Ç—å –æ—Ç—á—ë—Ç¬ª.
        </p>
      )}
    </div>
  )
}
