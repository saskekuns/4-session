import { useState, useEffect } from "react"

const workshops = [
  { ruName: "–ó–∞–≥–æ—Ç–æ–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ü–µ—Ö", engName: "procurement-shop" },
  { ruName: "–ü–µ–∫–∞—Ä–Ω—ã–π —Ü–µ—Ö", engName: "bakery-shop" },
  { ruName: "–£–ø–∞–∫–æ–≤–æ—á–Ω—ã–π —Ü–µ—Ö", engName: "packaging-shop" },
  { ruName: "–¶–µ—Ö –º–æ–Ω—Ç–∞–∂–∞ —Ç–æ—Ä—Ç–æ–≤", engName: "cake-assembly-shop" },
  { ruName: "–¶–µ—Ö –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è", engName: "design-shop" },
]
const icons = [
  { name: "–ê–ø—Ç–µ—á–∫–∞", src: "/icons/first-aid.png" },
  { name: "–í—ã—Ö–æ–¥", src: "/icons/exit.jpg" },
  { name: "–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ", src: "/icons/equipment.png" },
  { name: "–û–≥–Ω–µ—Ç—É—à–∏—Ç–µ–ª—å", src: "/icons/fire-extinguisher.png" },
]

export default function WorkshopLayout() {
  const [selectedWorkshop, setSelectedWorkshop] = useState(workshops[0].engName)
  const [placedIcons, setPlacedIcons] = useState([])
  const [, setDraggedIconIndex] = useState(null)
  const [rotation, setRotation] = useState(0)

  const [savedIcons, setSavedIcons] = useState([])
  const [savedRotation, setSavedRotation] = useState(0)

  const getImagePath = (workshop) => `/workshops/${workshop}.png`

  const handleDrop = (e) => {
    e.preventDefault()
    const rect = e.target.getBoundingClientRect()
    const x = e.clientX - rect.left
    const y = e.clientY - rect.top

    const iconName = e.dataTransfer.getData("iconName")
    const existingIndex = e.dataTransfer.getData("iconIndex")

    if (existingIndex) {
      // –ü–µ—Ä–µ–º–µ—â–∞–µ–º —É–∂–µ —Ä–∞–∑–º–µ—â—ë–Ω–Ω—É—é –∏–∫–æ–Ω–∫—É
      const updated = [...placedIcons]
      updated[existingIndex] = { ...updated[existingIndex], x, y }
      setPlacedIcons(updated)
      setDraggedIconIndex(null)
    } else {
      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Å –ø–∞–Ω–µ–ª–∏
      const icon = icons.find((i) => i.name === iconName)
      if (!icon) return
      setPlacedIcons([...placedIcons, { ...icon, x, y }])
    }
  }

  const handleDragStart = (e, iconName, index = null) => {
    e.dataTransfer.setData("iconName", iconName)
    if (index !== null) {
      e.dataTransfer.setData("iconIndex", index)
      setDraggedIconIndex(index)
    }
  }

  const handleIconClick = (e, index) => {
    if (e.altKey) {
      const updated = [...placedIcons]
      updated.splice(index, 1)
      setPlacedIcons(updated)
    }
  }

  const handleRotate = () => {
    setRotation((prev) => (prev + 90) % 360)
  }

  const handleSave = () => {
    // —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω–æ (–¥–ª—è –∫–Ω–æ–ø–∫–∏ "–û—Ç–º–µ–Ω–∏—Ç—å")
    setSavedIcons([...placedIcons])
    setSavedRotation(rotation)

    // —Ç—É—Ç –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    const payload = {
      workshop: selectedWorkshop,
      rotation,
      icons: placedIcons,
    }

    console.log("Sending payload:", payload) // ‚Üê –í–û–¢ –°–Æ–î–ê

    fetch(`http://localhost:3000/api/workshops/${selectedWorkshop}/layout`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(payload),
    })
      .then((res) => {
        if (!res.ok) throw new Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏")
        alert("–°—Ö–µ–º–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")
      })
      .catch((err) => alert("–û—à–∏–±–∫–∞: " + err.message))
  }

  const handleCancel = () => {
    setPlacedIcons([...savedIcons])
    setRotation(savedRotation)
  }

  useEffect(() => {
    const fetchLayout = async () => {
      try {
        const res = await fetch(
          `http://localhost:3000/api/workshops/${selectedWorkshop}/layout`
        )
        if (!res.ok) throw new Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ")
        const data = await res.json()
        setPlacedIcons(data.icons)
        setSavedIcons(data.icons)
        setRotation(data.rotation)
        setSavedRotation(data.rotation)
      } catch (err) {
        console.log("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ö–µ–º—ã:", err.message)
        setPlacedIcons([])
        setSavedIcons([])
        setRotation(0)
        setSavedRotation(0)
      }
    }

    fetchLayout()
  }, [selectedWorkshop])

  return (
    <div style={{ padding: "1rem" }}>
      <h2>–ü–ª–∞–Ω–∏—Ä–æ–≤–∫–∞ —Ü–µ—Ö–∞</h2>

      <label>
        –í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ—Ö:{" "}
        <select
          value={selectedWorkshop}
          onChange={(e) => {
            setSelectedWorkshop(e.target.value)
            setPlacedIcons([])
          }}
        >
          {workshops.map((w) => (
            <option key={w.engName} value={w.engName}>
              {w.ruName}
            </option>
          ))}
        </select>
      </label>

      <div
        style={{
          display: "flex",
          gap: "1rem",
          marginTop: "1rem",
          marginBottom: "3rem",
        }}
      >
        <button onClick={handleRotate}>–ü–æ–≤–µ—Ä–Ω—É—Ç—å</button>
        <button onClick={handleSave}>–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
        <button onClick={handleCancel}>–û—Ç–º–µ–Ω–∏—Ç—å</button>
      </div>

      <div
        onDrop={handleDrop}
        onDragOver={(e) => e.preventDefault()}
        style={{
          marginTop: "1rem",
          border: "1px solid #ccc",
          width: "100%",
          maxWidth: "600px", // –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —à–∏—Ä–∏–Ω–∞ —Å—Ö–µ–º—ã
          aspectRatio: "5 / 4", // –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –≤—ã—Å–æ—Ç—É
          position: "relative",
          backgroundImage: `url(${getImagePath(selectedWorkshop)})`,
          backgroundSize: "contain",
          backgroundRepeat: "no-repeat",
          backgroundPosition: "center",
          transform: `rotate(${rotation}deg)`,
          transition: "transform 0.3s ease",
        }}
      >
        {placedIcons.map((icon, index) => (
          <img
            key={index}
            src={icon.src}
            alt={icon.name}
            draggable
            onDragStart={(e) => handleDragStart(e, icon.name, index)}
            onClick={(e) => handleIconClick(e, index)} // üîß –¥–æ–±–∞–≤–ª–µ–Ω–æ
            style={{
              position: "absolute",
              top: icon.y - 16,
              left: icon.x - 16,
              width: "32px",
              height: "32px",
              cursor: "grab",
            }}
          />
        ))}
      </div>

      {/* üîß –¥–æ–±–∞–≤–ª–µ–Ω–æ ‚Äî –ø–∞–Ω–µ–ª—å –∑–Ω–∞—á–∫–æ–≤ */}
      <div style={{ marginTop: "3rem" }}>
        <strong>–ü–∞–Ω–µ–ª—å –∑–Ω–∞—á–∫–æ–≤:</strong>
        <div style={{ display: "flex", gap: "1rem", marginTop: "0.5rem" }}>
          {icons.map((icon) => (
            <img
              key={icon.name}
              src={icon.src}
              alt={icon.name}
              draggable
              onDragStart={(e) => handleDragStart(e, icon.name)}
              style={{ width: "40px", height: "40px", cursor: "grab" }}
            />
          ))}
        </div>
      </div>
    </div>
  )
}
